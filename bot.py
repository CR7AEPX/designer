import asyncio
import logging
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, ContentType, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.enums import ParseMode
from aiogram.filters.command import CommandStart
from aiogram.client.default import DefaultBotProperties
from datetime import datetime, timedelta

API_TOKEN = '7205740012:AAFfKskSgdLAiVCtR59D-rV0Eyk1cGVu6mA'
ADMIN_ID = 7646706120

logging.basicConfig(level=logging.INFO)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

last_submission = {}
user_category = {}

CATEGORIES = {
    "tech": "üß† –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
    "movies": "üé¨ –ö–∏–Ω–æ",
    "games": "üéÆ –ò–≥—Ä—ã",
    "culture": "üåç –ö—É–ª—å—Ç—É—Ä–∞"
}

WELCOME_TEXT = (
    "<b>üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–µ–¥–ª–æ–∂–∫–∞-–±–æ—Ç –∫–∞–Ω–∞–ª–∞ ¬´–ö–æ–¥–µ–∫—Å¬ª!</b>\n\n"
    "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ:\n"
    "‚Äî –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–∏–Ω–æ, –∏–≥—Ä—ã, –∫—É–ª—å—Ç—É—Ä–∞.\n\n"
    "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏.\n"
    "–î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.\n\n"
    "‚è≥ –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 10 –º–∏–Ω—É—Ç.\n\n"
    "<i>–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–∫–ª–∞–¥! –õ—É—á—à–∏–µ –∏–¥–µ–∏ –±—É–¥—É—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ.</i>"
)

def get_category_keyboard():
    buttons = [InlineKeyboardButton(text=name, callback_data=key) for key, name in CATEGORIES.items()]
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(*buttons)
    return keyboard

@dp.message(CommandStart())
async def cmd_start(message: Message):
    user_category.pop(message.from_user.id, None)
    await message.answer(WELCOME_TEXT, reply_markup=get_category_keyboard())

@dp.callback_query(F.data.in_(CATEGORIES.keys()))
async def category_chosen(callback: CallbackQuery):
    category_key = callback.data
    user_id = callback.from_user.id
    user_category[user_id] = category_key
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {CATEGORIES[category_key]}\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."
    )
    await callback.answer()

@dp.message(F.content_type.in_([ContentType.TEXT, ContentType.PHOTO]))
async def handle_proposal(message: Message):
    user_id = message.from_user.id
    if user_id not in user_category:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /start")
        return
    now = datetime.now()
    last_time = last_submission.get(user_id)
    if last_time and now - last_time < timedelta(minutes=10):
        await message.reply("‚õîÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ —Å–ø–∞–º—å—Ç–µ. –ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç.")
        return
    last_submission[user_id] = now
    category_key = user_category[user_id]
    category_name = CATEGORIES[category_key]
    username = (
        f"@{message.from_user.username}"
        if message.from_user.username
        else f"<a href='tg://user?id={user_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a>"
    )
    header = f"–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{category_name}</b> –æ—Ç {username}:"
    await bot.send_message(chat_id=ADMIN_ID, text=header)
    await message.copy_to(chat_id=ADMIN_ID)
    await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–æ.")

@dp.message()
async def reject_other_formats(message: Message):
    await message.reply("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏. –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è.")

if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))